{"componentChunkName":"component---src-templates-blog-post-js","path":"/PWA & FCM 알람 구현 | 웹서비스 모각GO가 실시간 알람을 구현하기 위한 과정/","result":{"data":{"site":{"siteMetadata":{"title":"yougyung.github.io"}},"markdownRemark":{"id":"13519e42-00d3-5208-816a-ae0df3764ae6","excerpt":"pull, push 둘 다 사용합니다! 모각GO \n일회성 만남과 지역 기반 매칭을 통해 기존 불편 요소를 해결하고, 게임적 경험을 제공하는 1:1 모각코 매칭 서비스\n 레포 이동하기 327285487-b2bf40fd-9809-46a9-80e3-7e355e54af4d (1) 모각GO…","html":"<br/>\n<br/>\n<h1>pull, push 둘 다 사용합니다!</h1>\n<blockquote>\n<p>모각GO <br/>\n일회성 만남과 지역 기반 매칭을 통해 기존 불편 요소를 해결하고, 게임적 경험을 제공하는 1:1 모각코 매칭 서비스\n<br/> <a href=\"https://github.com/Open-Eye-Im-Developer/MoGakGo-FE\">레포 이동하기</a></p>\n</blockquote>\n<p><img src=\"https://github.com/user-attachments/assets/f0dab997-b05f-40e8-b842-1e9a883aab46\" alt=\"327285487-b2bf40fd-9809-46a9-80e3-7e355e54af4d (1)\"></p>\n<p>모각GO는 매칭 서비스인만큼, 실시간으로 매칭 요청에 대한 결과를 사용자가 확인하는 기능이 중요하다고 생각합니다. 따라서 일반적인 client와 server의 상호작용에서는 client가 server로 http Protocol을 통해 요청을 보내고, 서버의 응답을 받아서 사용자에게 노출하지만, server에서 client로 먼저 알림 정보를 전송하는 역 방향으로 동작하는 방식이 필요하다는 생각을 하게 되었습니다.</p>\n<ol>\n<li>클라이언트에서 서버로 요청을 보내서 내역을 확인하는 방법 (pull 방식)</li>\n<li>서버에서 클라이언트로 전송하는 방법 (push 방식)</li>\n</ol>\n<p>따라서, 위 두 가지 방식을 모두 사용하기로 했습니다.</p>\n<br/>\n<h2>왜 하필 FCM?</h2>\n<p>알람 구현을 위해서 Short polling, Long Polling, webSocket, SSE(Server Sent Event)방식 등이 존재하지만, 디바이스별 알림처리를 위해 FCM을 이용해서 알림 기능을 구현했습니다.</p>\n<p>FCM는 클라이언트와 서버 사이에 메시지 전송 전용 클라우드 서버를 두고 클라이언트와 연결을 유지합니다. 알림 발송 이벤트가 발생하는 순간에만 FCM서버로 요청을 보내고 응답을 즉시 받는 무상태 상호작용을 진행하므로, 위에서 언급한 다양한 방식이 갖는 서버의 자원 지속적 소모 문제도 함께 해결할 수 있다는 장점도 함께 가져갈 수 있게 되었습니다 👍🏻</p>\n<br/>\n<br/>\n<h1>PWA와 FCM 전송</h1>\n<h3>PWA 환경 구축</h3>\n<ul>\n<li>모각코는 next이기때문에 next-pwa를 통해 next.config.mjs를 구성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//next.config.mjs</span>\n\n<span class=\"token comment\">/** @type {import('next').NextConfig} */</span>\n<span class=\"token keyword\">import</span> pkg <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-pwa\"</span>\n\n<span class=\"token keyword\">const</span> withPWA <span class=\"token operator\">=</span> pkg\n\n<span class=\"token keyword\">const</span> nextConfig <span class=\"token operator\">=</span> <span class=\"token function\">withPWA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">dest</span><span class=\"token operator\">:</span> <span class=\"token string\">\"public\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> nextConfig</code></pre></div>\n<ul>\n<li>빌드를 진행하면 <strong><code class=\"language-text\">/public</code></strong> 내부에 **<code class=\"language-text\">workbox-*.js</code>**와 <strong><code class=\"language-text\">sw.js</code></strong> 파일이 자동으로 생성된다 !</li>\n<li>PWA를 위해 manifest파일을 작성\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//manifest.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"theme_color\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"background_color\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"display\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"standalone\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"start_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"모각GO Projressive Web App\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"short_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"모각GO\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"모각Go는 지역기반 모각코 1:1 매칭 서비스입니다.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"icons\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/icon-192x192.png\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"sizes\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"192x192\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"purpose\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"any maskable\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/icon-256x256.png\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"sizes\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"256x256\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/png\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/icon-384x384.png\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"sizes\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"384x384\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/png\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/icon-512x512.png\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"sizes\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"512x512\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/png\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>header에 manifest 추가를 진행\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">&lt;link rel=<span class=\"token string\">\"manifest\"</span> href=<span class=\"token string\">\"/manifest.json\"</span> /></code></pre></div>\n<br/>\n</li>\n</ul>\n<h3>FCM 연동</h3>\n<p>아래 작업 내역의 경우에는 테스트로 생성한 Firebase app을 기준으로 정리한 내용이며, 현재 삭제된 프로젝트이므로 모각GO와는 관련없는 정보입니다!</p>\n<ul>\n<li>\n<p>firebase service worker등록</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">import <span class=\"token punctuation\">{</span> initializeApp <span class=\"token punctuation\">}</span> from <span class=\"token string\">\"firebase/app\"</span>;\n\nconst firebaseConfig = <span class=\"token punctuation\">{</span>\n  apiKey<span class=\"token operator\">:</span> <span class=\"token string\">\"AIzaSyAsST86aqVITDUXVuYFi4J4wMir_IYEmTE\"</span><span class=\"token punctuation\">,</span>\n  projectId<span class=\"token operator\">:</span> <span class=\"token string\">\"web-push-cf450\"</span><span class=\"token punctuation\">,</span>\n  messagingSenderId<span class=\"token operator\">:</span> <span class=\"token string\">\"735744104710\"</span><span class=\"token punctuation\">,</span>\n  appId<span class=\"token operator\">:</span> <span class=\"token string\">\"1:735744104710:web:d8454962b445db084ce687\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>;\n\ninitializeApp(firebaseConfig);</code></pre></div>\n</li>\n<li>\n<p>사용자 권한 요청</p>\n<ul>\n<li>해당 과정이 선행되어야 FCM 알람을 받을 수 있어요</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"> const requestPermission = () => <span class=\"token punctuation\">{</span>\n    Notification.requestPermission().then(permission => <span class=\"token punctuation\">{</span>\n      if (permission === <span class=\"token string\">\"granted\"</span>) <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//알림 권한이 허용된 경우에 따른 처리</span>\n      <span class=\"token punctuation\">}</span> else <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//알림 권한이 거절을 선택한 경우에 따른 처리</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>);\n  <span class=\"token punctuation\">}</span>;</code></pre></div>\n</li>\n<li>\n<p>FCM을 위한 사용자 토큰 발급</p>\n<ul>\n<li>해당 토큰의 주인에게 알람이 발송되는 시스템이고, 동일 사용자가 여러개의 디바이스로 접속했다면 여러개의 토큰이 한 명의 사용자의 소속으로 생성됩니다. 이 경우에는 가장 최근 토큰으로 알람을 전송하게 백엔드와 약속했어요 🤙🏻</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  const allowAlarm = () => <span class=\"token punctuation\">{</span>\n    const firebaseApp = initializeApp(<span class=\"token punctuation\">{</span>\n      apiKey<span class=\"token operator\">:</span> <span class=\"token string\">\"AIzaSyAsST86aqVITDUXVuYFi4J4wMir_IYEmTE\"</span><span class=\"token punctuation\">,</span>\n      authDomain<span class=\"token operator\">:</span> <span class=\"token string\">\"web-push-cf450.firebaseapp.com\"</span><span class=\"token punctuation\">,</span>\n      projectId<span class=\"token operator\">:</span> <span class=\"token string\">\"web-push-cf450\"</span><span class=\"token punctuation\">,</span>\n      storageBucket<span class=\"token operator\">:</span> <span class=\"token string\">\"web-push-cf450.appspot.com\"</span><span class=\"token punctuation\">,</span>\n      messagingSenderId<span class=\"token operator\">:</span> <span class=\"token string\">\"735744104710\"</span><span class=\"token punctuation\">,</span>\n      appId<span class=\"token operator\">:</span> <span class=\"token string\">\"1:735744104710:web:d8454962b445db084ce687\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>);\n\n    const messaging = getMessaging(firebaseApp);\n\n    getToken(messaging<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      vapidKey<span class=\"token operator\">:</span>\n        <span class=\"token string\">\"BMx4Oq3RdTOvyqpRuL7kwdi3m9-EWXwQumnkjm-mrXWfGNeSHcLQrlLr4LA6d4o07M-H8xtNTeV4biV138boEjA\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>)\n      .then(currentToken => <span class=\"token punctuation\">{</span>\n        if (currentToken) <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\">//해당 클라이언트의 디바이스에 대한 토큰을 전달 받은 경우의 처리</span>\n\t\t\t\t <span class=\"token comment\">//저희 서비스에서는 해당 단계에서 서버로 토큰을 전송하는 POST 요청을 발생시켰어요</span>\n      <span class=\"token punctuation\">}</span>)\n      .catch(err => <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">//토큰 발급 과정에서 에러가 발생하는 경우</span>\n      <span class=\"token punctuation\">}</span>);\n  <span class=\"token punctuation\">}</span>;</code></pre></div>\n</li>\n</ul>\n<br/>\n<h2>[삽질하기] IOS 에서는 안돼 ~</h2>\n<blockquote>\n<p>모각GO는 서비스 특성 상, 모바일로 사용할 가능성이 높기때문에 PWA로 구현을 계획했어요</p>\n</blockquote>\n<ul>\n<li>push알람을 받기 위해서 PWA를 적용 시키고 FCM과의 연동을 진행했음 !</li>\n<li>PWA로 모바일에서 사용하기 위해서는</li>\n</ul>\n<ol>\n<li>Safari에서 웹 사이트에 접속</li>\n<li>가운데에 있는 공유 버튼 클릭</li>\n<li>홈 화면에 추가하기</li>\n<li>추가한 아이콘을 클릭해서 앱에 접속한 이후, 푸시 허용을 해야지만 알림이 전송 됨</li>\n</ol>\n<p><img src=\"https://github.com/user-attachments/assets/81d5d14a-b46f-4d1c-b0fc-55f605d67ce0\" alt=\"잘 도착하쟈나 ~~~~~\"></p>\n<blockquote>\n<p>🫠 BUT IOS에서는 알림이 가지 않는 이슈 존재 <br/>\n→ 아무런 반응도 하지 않아, 4번 절차를 진행할 수 없었다.</p>\n</blockquote>\n<ol>\n<li>데스크탑에서는 정상적으로 도착하기 때문에, FCM의 연결이 잘못된 것이라고는 볼 수 없었고 IOS의 연결에 문제가 있는지 구글링을 반복할 수 밖에 없었는데</li>\n</ol>\n<blockquote>\n<p>FCM은 https에서만 실행 가능하며 사파리는 FCM이 지원을 하지 않아 아이폰에는 알람이 가지 않았는데, <a href=\"\">WWDC 2022에서 Safari 16부터 웹 푸시 알람을 지원</a>한다고 발표했으므로 별도 문제 없음.</p>\n</blockquote>\n<ol start=\"2\">\n<li>명확한 이유를 찾고 싶어서 기본적으로 모바일 기기에서는 safari에 대한 기본 notification 설정이 false로 되어져 있는데( 이 경우 aleart가 작동하지 않는다 ! ),</li>\n</ol>\n<p>디바이스 설정을 true로 변경하고 aleart 알람창을 통해 <code class=\"language-text\">Notification.permission</code>권한을 확인해보니 <code class=\"language-text\">Notification.permission</code> 이 <code class=\"language-text\">dennied</code> 상태로 존재하기때문에 알람 허용 요청조차 가지 않고 있는 것이라는 것을 확인했음 - 한 번 이상 거절하면, <code class=\"language-text\">Notification.permission</code> 가 dennied로 설정 되고 알람 허용 요청 조차 가지 않음 ! 변경을 위해서는 직접 앱 설정으로 이동해 변경해줘야한다 !</p>\n<ol start=\"3\">\n<li>\n<p>iOS에서는 웹 앱이 홈 화면에 설치되지 않은 경우 항상 <code class=\"language-text\">denied</code>를 반환하는데, 여러번의 배포 과정을 통해 <strong>혹시 내가 PWA가 아닌가..?</strong> 라는 질문을 하게 되었고 검증을 위해 LightHouse의 progresive web app을 통해 검사를 진행했다. → 만족하지 않은 조건이 있길래 만족시킨 후, 다시 테스트를 진행했다</p>\n</li>\n<li>\n<p>ㅋ.ㅋ pwa가 아니었던.. 머슥.. 모바일에서 정상적으로 오는 것도 확인했움 !</p>\n<p><img src=\"https://github.com/user-attachments/assets/1dca3c8d-ee95-4d7c-9ecf-336562716b99\" alt=\"스크린샷 2024-02-23 오전 11.55.18.png\"></p>\n</li>\n</ol>\n<br/>\n<br/>\n<br/>\n<h3>고민) 권한허용을 어느 시점에 받을까</h3>\n<p>기존에는 서비스에 접근하자마자 요청을 보내는 방식이었는데, 우리 서비스의 성격상 <strong>서비스에 진입하자마자 위치정보의 동의</strong>를 받아야한다. 알람 요청까지 서비스 진입 시에 받는다면,</p>\n<ol>\n<li>반복된 권한 요청이 사용자로 하여금 개인정보의 부담을 느끼게 할 수 있다</li>\n<li>이벤트 없이 메소드를 호출할 경우 브라우저마다 작동하지 않는 이슈 가능성이 존재하므로 <code class=\"language-text\">Notification.requestPermission()</code> 을 통한 권한 요청은 사용자의 클릭을 통해서 호출되는 방식을 권장한다</li>\n</ol>\n<p>위 두가지의 이유로 알람페이지의 화면에서 알림 켜기 버튼을 구현했다.</p>\n<img width=\"50%\" alt=\"스크린샷 2024-07-25 오후 3 18 24\" src=\"https://github.com/user-attachments/assets/fb7d0e46-5b42-4011-8c83-55cb87c94914\">","frontmatter":{"date":"2024.07.06","title":"PWA & FCM 알람 구현 | 웹서비스 모각GO가 실시간 알람을 구현하기 위한 과정","description":null,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#78d8f8","images":{"fallback":{"src":"/static/238673aa304f2804ad45489cc6cef06e/51395/example.png","srcSet":"/static/238673aa304f2804ad45489cc6cef06e/ada26/example.png 142w,\n/static/238673aa304f2804ad45489cc6cef06e/fac99/example.png 284w,\n/static/238673aa304f2804ad45489cc6cef06e/51395/example.png 568w","sizes":"(min-width: 568px) 568px, 100vw"},"sources":[{"srcSet":"/static/238673aa304f2804ad45489cc6cef06e/83107/example.webp 142w,\n/static/238673aa304f2804ad45489cc6cef06e/278b7/example.webp 284w,\n/static/238673aa304f2804ad45489cc6cef06e/c32a8/example.webp 568w","type":"image/webp","sizes":"(min-width: 568px) 568px, 100vw"}]},"width":800,"height":532.3943661971831}}}}},"previous":null,"next":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"tailwind theme 동적 할당을 통한 커스텀 애니메이션 구현하기"}}},"pageContext":{"id":"13519e42-00d3-5208-816a-ae0df3764ae6","previousPostId":null,"nextPostId":"34007725-73a0-5275-b2ca-32619df50e72"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}