<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[yougyung의 tech blog]]></description><link>https://yougyung.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 08 Nov 2024 11:48:24 GMT</lastBuildDate><item><title><![CDATA[tailwind theme 동적 할당을 통한 커스텀 애니메이션 구현하기]]></title><description><![CDATA[졸업을 부탁해 
간편 졸업요건검사 서비스 졸업을 부탁해는 졸업을 위해 반드시 필요한 수강과목과 졸업요건 정보가 파편화되어져 있고 자주 변경되어 학우들이 어려움을 겪는다는 문제점에서 시작된 프로젝트로, MyiWeb MSI…]]></description><link>https://yougyung.github.io/hello-world/</link><guid isPermaLink="false">https://yougyung.github.io/hello-world/</guid><pubDate>Sun, 28 Jul 2024 22:12:03 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;졸업을 부탁해 &lt;br/&gt;
간편 졸업요건검사 서비스&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;details&gt;
&lt;summary&gt;졸업을 부탁해 더 알아보기&lt;/summary&gt;
&lt;blockquote&gt;
&lt;p&gt;졸업을 부탁해는 졸업을 위해 반드시 필요한 수강과목과 졸업요건 정보가 파편화되어져 있고 자주 변경되어 학우들이 어려움을 겪는다는 문제점에서 시작된 프로젝트로, MyiWeb MSI의 성적표만으로 졸업을 위해 필요한 미이수 과목 정보 및 잔여학점 조회, 카테고리별 수강학점현황, 강의 커스텀을 통한 졸업사정예측 서비스를 원클릭으로 제공합니다.
&lt;br/&gt; &lt;a href=&quot;https://github.com/Open-Eye-Im-Developer/MoGakGo-FE&quot;&gt;레포 이동하기&lt;/a&gt; &lt;br/&gt; &lt;a href=&quot;https://mju-graduate.com&quot;&gt;서비스 이동하기&lt;/a&gt; &lt;br/&gt; &lt;a href=&quot;https://github.com/Myongji-Graduate/myongji-graduate-next/pull/59/files&quot;&gt;PR 이동하기&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;h2&gt;졸부의 커스텀 애니메이션&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/289b5960-b164-4181-904d-d18f70bd26ff&quot; alt=&quot;화면 기록 2024-07-28 오후 3 15 40&quot;&gt;&lt;/p&gt;
&lt;p&gt;졸업을 부탁해는 성적표를 입력하는 경우, 졸업요건의 충족을 위해 카테고리 별로 수강 정보 및 이수 현황을 제공하고 있습니다! &lt;br/&gt;
그 과정에서 시각화도구로 chart를 이용하였으며, 이수 현황 비율에 맞춰 chart animation을 custom하여 제공하고 있습니다.&lt;/p&gt;
&lt;h2&gt;요구사항&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;percentage 변수에 맞춰 동적으로 chart게이지를 노출할 수 있어야한다.&lt;/li&gt;
&lt;li&gt;졸부팀이 사용하는 css framework(tailwind)로 구현해야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;구현&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;만일 저희 팀이 CSS-in-JS를 사용하는 경우였다면, props를 통해 percentage변수를 전달하여 동적 애니메이션을 노출했을 것으로 예상됩니다. &lt;br/&gt;
하지만.. 우리팀은 tailwind를 쓰니까!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;percentage css 변수 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@property&lt;/span&gt; --percentage&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;number&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;inherits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; true&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;initial-value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;css animation 구현&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@keyframes&lt;/span&gt; piechart&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;--percentage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.piechart::before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; piechart 1s forwards&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;inset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;radial-gradient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;farthest-side&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #7590ff 98%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #0000&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; top/1.1rem 1.5rem
      no-repeat&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;conic-gradient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#7590ff &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;—percentage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; * 1%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #0000 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.piechart:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; piechart 1s forwards&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 46%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;inset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;50% - 0.74rem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #7590ff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;—percentage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; * 3.6deg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translateY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;50% - 9rem / 2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;piechart component에서 --percentage 변수에 동적으로 값을 할당 &amp;#x26; class 추가&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;use client&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PieChartProp&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  percentage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PieChart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; percentage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PieChartProp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; filterdPercentage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; percentage &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; percentage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div
      className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;piechart ...&apos;&lt;/span&gt;
      style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token string-property property&quot;&gt;&apos;--percentage&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; percentage
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;filterdPercentage&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; PieChart&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;--percectage 커스텀 변수를 할당하면 build시에
&lt;code class=&quot;language-text&quot;&gt;Object literal may only specify known properties, and &apos;&apos;--percentage&apos;&apos; does not exist in type &apos;Properties&amp;lt;string | number, string &amp;amp; {}&gt;&apos;.&lt;/code&gt;
해당 타입오류가 발생할겁니당 &lt;br/&gt;
TypeScript에서 예상하는 속성타입에는 없는 &lt;code class=&quot;language-text&quot;&gt;--percentage&lt;/code&gt; 속성이 존재하기때문에 발생하는 이슈로
이를 해결하기 위해 react가 권장하는 &lt;a href=&quot;https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors&quot;&gt;모듈 확장&lt;/a&gt;을 통해 확장을 진행했습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//css.d.ts&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;csstype&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;csstype&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//Add CSS Custom Properties&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;--percentage&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;경험한 문제&lt;/h2&gt;
&lt;h3&gt;커스텀 애니메이션이 적용되지않아 (.இ﹏இ`｡)&lt;/h3&gt;
&lt;p&gt;pie-chart의 애니메이션은 커스텀 변수(--percentage)가 0부터 할당해준 값까지 상승하며 차트가 그려지는 구조입니다.&lt;br/&gt;
하지만 0%와 100%의 경우에만 애니메이션으로 변화가 적용되는 문제!!를 경험했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//tailwind.config.ts&lt;/span&gt;
theme &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    extend &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       animation &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            piechart &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token string-property property&quot;&gt;&apos;0%&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&apos;--percentage&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드는 처음 애니메이션을 적용한 코드입니다.&lt;br/&gt; 졸부팀은 tailwind를 사용하기때문에 tailwind.config.ts에
커스텀 변수가 애니메이션을 적용시켰습니다. &lt;br/&gt; --percentage는 number type으로 0을 할당해줘야하는데, tailwind.config.ts에는 string type으로만 type지정이 가능하므로 커스텀 변수의 값을 ‘0’으로 지정한 것이 원인이었습니다. &lt;br/&gt;
해당 문제를 확인하고, 위의 코드와 같이 piechart에 사용되는 css는 별도로 분리해서 pie-chart.css file을 통해 관리하고 있습니다!!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[FE 렌더링 흐름 이해하기 그리고 내가 프로젝트를 할 때 rendering방식을 결정하는 기준]]></title><description><![CDATA[프로그래머스 데브코스를 진행하면서 로토 강사님의 FE…]]></description><link>https://yougyung.github.io/3/</link><guid isPermaLink="false">https://yougyung.github.io/3/</guid><pubDate>Sun, 28 Jul 2024 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;프로그래머스 데브코스를 진행하면서 로토 강사님의 FE렌더링 강의를 듣고, 모르는 개념도 존재하고 중간에 이해가 명확하지 않은 부분이 존재해 렌더링에 대한 이해가 부족하다고 느꼈어요. 강사님의 강의를 토대로 제 공부를 더해 랜더링 흐름에 대해서 정리하고 개인적인 생각을 덧붙인 글입니다.&lt;/p&gt;
&lt;h3&gt;100% Static HTML&lt;/h3&gt;
&lt;p&gt;FE렌더링을 저 끝까지 돌이켜보면, 처음에는 완전 정적인 HTML파일만 제공했다고 해요.&lt;/p&gt;
&lt;p&gt;1990년대 후반 경에 서버에서 완전 고정된 정적 HTML파일만 내려주고 URL경로가 파일 경로이던 시절에 해당합니다.&lt;/p&gt;
&lt;h3&gt;Server Side Template&lt;/h3&gt;
&lt;p&gt;조금지나서 JSP, jango 등 서버사이드에서 특정한 template 문법으로 마크업을 생성해주는 언어가 등장합니다. 이전의 완전 정적인 HTML을 제공하는 것에서 벗어나, server application에서 동적으로 html을 생성해서 내려주는 방식으로 진화하게 된 것이죠.&lt;/p&gt;
&lt;p&gt;[클라이언트 → web server → web application server → DB] 구조로 되어있어서, 정적 컨텐츠는 web server가 web application server를 거치지 않고 바로 제공하고, 동적 컨텐츠는 web server가 요청을 web application server로 보내 생성한 html를 전달받아 내려주는 방식으로 정적/동적 컨텐츠를 제공해요. 인터렉션이 발생하는 경우에는 javascript를 클라이언트에서 별도로 실행하는 방식으로 처리했습니다.&lt;/p&gt;
&lt;p&gt;web application server에서 정적/동적 컨텐츠를 모두 처리하면 되는 것이 아닌가?라는 의문이 들었는데, WAS는 DB조회 및 로직 처리가 중심 기능이더라고요. 정적 컨텐츠는 web server에서 처리하는 것이 서버 부하를 방지할 수 있게 되는 것이죠.&lt;/p&gt;
&lt;p&gt;더불어 이 시기에 많이 사용되었던 것이 Asynchronous JavaScript and XML(AJAX)인데요. JavaScript와 XMLHttpRequest객체를 사용해서 클라이언트와 서버가 비동기적으로 통신하는 방식입니다. 당시 동적 웹페이지를 만들기 위해서 사용한 방법으로, 페이지 전체를 리렌더링하는 것이 아니라 필요한 부분에 한해서 렌더링이 가능해서 AJAX를 통해서 데이터를 불러와서 클라이언트단에서 추가로 렌더링하는 방식을 많이 사용했다고 해요.&lt;/p&gt;
&lt;p&gt;저는 사실 경험해본적 없는 시절인데, 멘토님에게 전해듣기로는 기능 구현에따라서 같은 뷰 로직이 server side에서와 client side에서 모두 구현이 되어야 한다는 특징이 몹시 번거로우셨다고 해요.&lt;/p&gt;
&lt;p&gt;첫 렌더링은 JSP로 그렸는데, API를 호출해서 동적인 움직임이 필요한 경우에는 js에서 마크업의 변화가 발생해야하고 해당 동일한 뷰를 서버와 클라이언트단에서 그려야하는데, 누락이 발생하거나 수정을 한쪽만 하는 등의 문제가 많이 발생했다고 해요. 렌더링 시점이 뒤섞이면서 복잡한 인터렉션이 발생하는 경우에는 그 난이도가 갈수록 높아지는 것이죠.&lt;/p&gt;
&lt;h3&gt;SSR&lt;/h3&gt;
&lt;p&gt;개발 난이도 뿐만아니라 server side tamplate방식은 UX에도 방해가 되었는데요. MPA는 화면의 이동이 발생할때마다 html,css,js를 서버에서 새로 받아와 새롭게 그리므로 화면깜빡임이 발생할 수 밖에 없는데 AJAX를 통해서 동적으로 데이터 fetch + hashbang을 통한 페이지의 이동 없이 URL변경이 이뤄지면서 페이지 전환 방식의 변화가 발생합니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://yougyung.github.io/#hello&quot;&gt;https://yougyung.github.io/#hello&lt;/a&gt; 에서 해시(#)뱅(!)의 뒤에 붙는 부분은 fragment identifier라고 부릅니다. hashbang기법을 통해 변경된 URL을 제공할 수 있고, AJAX를 통한 데이터 노출이 가능해져서 화면의 깜빡거림 없이 전환과 로딩을 통한 UX개선을 만들어낸 거죠. 하지만 해당 hashbang은 크롤러가 해쉬 뱅이 적용된 사이트의 콘텐츠를 불러오지 못하는 SEO문제가 존재했어요.&lt;/p&gt;
&lt;p&gt;하지만 해당 SEO문제도 PJAX가 등장하면서 해결됩니다. 이후에 historyAPI가 등장함을 통해 pushState와 Ajax를 결합한 것이 PJAX인데,historyAPI의 pushState, replaceState으로 페이지 이동 없는 브라우저의 주소 변경이 가능해지고, 첫 페이지 접속은 서버에서 내려주는 HTML을 렌더링하고이후 페이지 전환을 의도하는 경우에는 브라우저가 실제 페이지 전환없이 ajax와 pushState 서버로부터 렌더링할 HTML을 불러와서 교체하며 MPA와 1:1대응이 가능해집니다.즉 MPA+ajax+pushState가 전통적인 MPA 구조를 유지하면서도 SPA의 이점을 활용하며 서버사이드 렌더링을 실현하는 것이죠.&lt;/p&gt;
&lt;h3&gt;CSR&lt;/h3&gt;
&lt;p&gt;브라우저 및 javascript의 발전으로 그냥 렌더링을 client에서 전부하자는 시도가 드러났어요. 웹 어플리케이션은 HTML, CSS, JS만 가지고 있어서 뷰 로직은 전부 client에 존재하고, server에서는 API형태로 데이터만 내려주는 형태가 만들어진거죠.&lt;/p&gt;
&lt;p&gt;서버상에서 실행하는 코드 없이 브라우저에서 JS를 실행해서 돌아가는게 대부분이므로 배포를 쉽고 빠르게 할 수 있으며 &lt;strong&gt;무엇보다 별도의 서버 관리 없이&lt;/strong&gt; 운영이 가능해진다는게 특징이었어요. 서버가 존재하지 않으므로 URL도 client에서 처리하는 single page applicaiton의 성격을 갖게됩니다.&lt;/p&gt;
&lt;p&gt;CSR의 특징에서 비롯되는 단점도 존재합니다. SPA는 어느페이지를 접속해도 매번 같은 index.html을 내려주므로 meta:og 태그 관련 문제가 발생되며 SEO관점에서 불리하게 작용해요. 더불어 fe가 복잡해지면서 번들 사이즈가 점점 커지고, 이 부분이 lighthouse의 성능 점수가 낮게 나오는 요소로 작용해요.&lt;/p&gt;
&lt;h1&gt;다시 SSR&lt;/h1&gt;
&lt;p&gt;기존 ssr의 문제점으로 제고되는 ss,cs에서 각각 렌더링을 위한 코드를 만들어야한다는 문제가 두드러졌음. 노드 js의 발전으로 이전과는 다른 점이 서버와 클라이언트가 같은 언어를 사용할 수 있다는 점이 다시 SSR로 발전하는 흐름으로 이끈 것 isomorphic(Universal)방식 (같은 코드로 server및 client에서 동일하게 실행되는 환경)을 통해 SSR 구축시에는 같은 언어로 동작하는 node.js를 서버로 사용하는 경우가 많음&lt;/p&gt;
&lt;p&gt;이 경우에도 문제는 발생하는데 서버와 클라이언트에서 같은 코드로 동작가능하게 만들어야하므로, Server-side에서는 사용할 수 없는 window객체를 사용하는 경우에 이를 예외처리해줘야하는 제약이 존재함.&lt;/p&gt;
&lt;p&gt;ssr문제를 isomorphic로 제공하는것이 nextjs프레임워크&lt;/p&gt;
&lt;p&gt;nodejs의 발전으로 client와 server가 같은 언어를 쓸 수 있게 되면서 다시 렌더링의 책임을 server로 일부 돌리는 움직임이 발생. 중요한 것은 python, java등의 언어로 하던 이전의 방식과는 근본적으로 다른것이 client와 server가 각각의 언어로 뷰로직을 구현하는 것이 아닌, 뷰 로직은 같은 언어로 공유한다는 차원이 다른 것이며, 의미론적으로 server template기반의 렌더링과 비슷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSR과는 다르게, serverless가 아니게 되므로, server 관리 책임이 생김(트래픽이 몰리면 서버를 늘려야하고, 없으면 줄여야함)&lt;/li&gt;
&lt;li&gt;스케일 업 다운 등의 과정을 거치므로 배포시간이 더 오래걸리고 세팅이 복잡하다는 문제가있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;그리고..&lt;/h1&gt;
&lt;p&gt;SSR의 경우에 렌더링 결과를 redis에 캐시해서 제공하는 식으로 최적화하던데, 모든 경우의수를 html파일로 만들면? → SSG&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동적 페이지를 포함해서 사이트의 모든 페이지를 미리 정적으로 생성함&lt;/li&gt;
&lt;li&gt;모든 동적인 케이스에 따라서 사이트를 만들기때문에 server가 필요없어지며 meta tag문제도 해결가능&lt;/li&gt;
&lt;li&gt;렌더링 한 결과물을 제공하므로 js실행시간도 단축&lt;/li&gt;
&lt;li&gt;🌟 이미 생성된 정적인 페이지를 내려주므로 CDN을 통해 제공할 수 있어서 속도에서 큰 이득 🌟&lt;/li&gt;
&lt;li&gt;하지만, 동적으로 렌더링해야하는 컨텐츠가 많으 경우 빌드시간이 컨텐츠 갯수에 비례해서 증가하고 배포된 이후에 컨텐츠의 내용이 바뀌면, 변경된 내용을 반영하기 위해서 다시 빌드 및 배포를 진행해야하므로 개인 블로그 및 라이브러리 문서 페이지수준으로 사용됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Distributed persistent rendering&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSG의 단점을 보완하기 위한 방법으로 정적생성을 한다는 점이 동일하지만, 일부 페이지만 정적으로 생성하고 비교적으로 중요하지않은 페이지는 최초접근 시렌더링하고 그 결과를 정적으로 만들어버리는 개념으로 모든 페이지를 미리빌드할필요가없어 빌드시간을 줄일수있음
&lt;ul&gt;
&lt;li&gt;서버가 필요하긴하지만, SSR보다는 서버 의존도가 낮음&lt;/li&gt;
&lt;li&gt;해당개념을 nextjs에서 ISR(incremental static regeneration)이라는 개념으로 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ISR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정적으로 생성되는 페이지에 필요시 revalidate라는 값으로 유효시간을 설정해서 유효시간 이전에 들어온 요청에 대해서는 정적인 response을 보내고, 이후에 들어온 요청에 대해서는 서버를 띄워서 다시 만들어 보내는 것으로 처리
&lt;ul&gt;
&lt;li&gt;컨텐츠의 변경이 실시간으로 반영되지는 않지만, 다시 빌드 및 배포해야한다는 부담이 사라지고, 최신 버전에서는 revalidate를 강제할 수 있는 기능이 추가됨(vercel기준)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[PWA & FCM 알람 구현 | 웹서비스 모각GO가 실시간 알람을 구현하기 위한 과정]]></title><description><![CDATA[pull, push 둘 다 사용합니다! 모각GO 
일회성 만남과 지역 기반 매칭을 통해 기존 불편 요소를 해결하고, 게임적 경험을 제공하는 1:1 모각코 매칭 서비스
 레포 이동하기 327285487-b2bf40fd-9809-46a9-80e3-7e…]]></description><link>https://yougyung.github.io/PWA &amp; FCM 알람 구현 | 웹서비스 모각GO가 실시간 알람을 구현하기 위한 과정/</link><guid isPermaLink="false">https://yougyung.github.io/PWA &amp; FCM 알람 구현 | 웹서비스 모각GO가 실시간 알람을 구현하기 위한 과정/</guid><pubDate>Sat, 06 Jul 2024 23:46:37 GMT</pubDate><content:encoded>&lt;br/&gt;
&lt;br/&gt;
&lt;h1&gt;pull, push 둘 다 사용합니다!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;모각GO &lt;br/&gt;
일회성 만남과 지역 기반 매칭을 통해 기존 불편 요소를 해결하고, 게임적 경험을 제공하는 1:1 모각코 매칭 서비스
&lt;br/&gt; &lt;a href=&quot;https://github.com/Open-Eye-Im-Developer/MoGakGo-FE&quot;&gt;레포 이동하기&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/f0dab997-b05f-40e8-b842-1e9a883aab46&quot; alt=&quot;327285487-b2bf40fd-9809-46a9-80e3-7e355e54af4d (1)&quot;&gt;&lt;/p&gt;
&lt;p&gt;모각GO는 매칭 서비스인만큼, 실시간으로 매칭 요청에 대한 결과를 사용자가 확인하는 기능이 중요하다고 생각합니다. 따라서 일반적인 client와 server의 상호작용에서는 client가 server로 http Protocol을 통해 요청을 보내고, 서버의 응답을 받아서 사용자에게 노출하지만, server에서 client로 먼저 알림 정보를 전송하는 역 방향으로 동작하는 방식이 필요하다는 생각을 하게 되었습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;클라이언트에서 서버로 요청을 보내서 내역을 확인하는 방법 (pull 방식)&lt;/li&gt;
&lt;li&gt;서버에서 클라이언트로 전송하는 방법 (push 방식)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;따라서, 위 두 가지 방식을 모두 사용하기로 했습니다.&lt;/p&gt;
&lt;br/&gt;
&lt;h2&gt;왜 하필 FCM?&lt;/h2&gt;
&lt;p&gt;알람 구현을 위해서 Short polling, Long Polling, webSocket, SSE(Server Sent Event)방식 등이 존재하지만, 디바이스별 알림처리를 위해 FCM을 이용해서 알림 기능을 구현했습니다.&lt;/p&gt;
&lt;p&gt;FCM는 클라이언트와 서버 사이에 메시지 전송 전용 클라우드 서버를 두고 클라이언트와 연결을 유지합니다. 알림 발송 이벤트가 발생하는 순간에만 FCM서버로 요청을 보내고 응답을 즉시 받는 무상태 상호작용을 진행하므로, 위에서 언급한 다양한 방식이 갖는 서버의 자원 지속적 소모 문제도 함께 해결할 수 있다는 장점도 함께 가져갈 수 있게 되었습니다 👍🏻&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;h1&gt;PWA와 FCM 전송&lt;/h1&gt;
&lt;h3&gt;PWA 환경 구축&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;모각코는 next이기때문에 next-pwa를 통해 next.config.mjs를 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//next.config.mjs&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/** @type {import(&apos;next&apos;).NextConfig} */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pkg &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;next-pwa&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; withPWA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pkg

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nextConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;withPWA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;public&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; nextConfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;빌드를 진행하면 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;/public&lt;/code&gt;&lt;/strong&gt; 내부에 **&lt;code class=&quot;language-text&quot;&gt;workbox-*.js&lt;/code&gt;**와 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;sw.js&lt;/code&gt;&lt;/strong&gt; 파일이 자동으로 생성된다 !&lt;/li&gt;
&lt;li&gt;PWA를 위해 manifest파일을 작성
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//manifest.json&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;theme_color&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;background_color&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;display&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;standalone&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;start_url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;모각GO Projressive Web App&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;short_name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;모각GO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;모각Go는 지역기반 모각코 1:1 매칭 서비스입니다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;icons&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/icon-192x192.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;192x192&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;purpose&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;any maskable&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/icon-256x256.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;256x256&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;image/png&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/icon-384x384.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;384x384&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;image/png&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/icon-512x512.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;512x512&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;image/png&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;header에 manifest 추가를 진행
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;lt;link rel=&lt;span class=&quot;token string&quot;&gt;&quot;manifest&quot;&lt;/span&gt; href=&lt;span class=&quot;token string&quot;&gt;&quot;/manifest.json&quot;&lt;/span&gt; /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;FCM 연동&lt;/h3&gt;
&lt;p&gt;아래 작업 내역의 경우에는 테스트로 생성한 Firebase app을 기준으로 정리한 내용이며, 현재 삭제된 프로젝트이므로 모각GO와는 관련없는 정보입니다!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;firebase service worker등록&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;import &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; initializeApp &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; from &lt;span class=&quot;token string&quot;&gt;&quot;firebase/app&quot;&lt;/span&gt;;

const firebaseConfig = &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  apiKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AIzaSyAsST86aqVITDUXVuYFi4J4wMir_IYEmTE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  projectId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;web-push-cf450&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  messagingSenderId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;735744104710&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  appId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1:735744104710:web:d8454962b445db084ce687&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;;

initializeApp(firebaseConfig);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용자 권한 요청&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 과정이 선행되어야 FCM 알람을 받을 수 있어요&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt; const requestPermission = () =&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Notification.requestPermission().then(permission =&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      if (permission === &lt;span class=&quot;token string&quot;&gt;&quot;granted&quot;&lt;/span&gt;) &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//알림 권한이 허용된 경우에 따른 처리&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; else &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//알림 권한이 거절을 선택한 경우에 따른 처리&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;);
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FCM을 위한 사용자 토큰 발급&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 토큰의 주인에게 알람이 발송되는 시스템이고, 동일 사용자가 여러개의 디바이스로 접속했다면 여러개의 토큰이 한 명의 사용자의 소속으로 생성됩니다. 이 경우에는 가장 최근 토큰으로 알람을 전송하게 백엔드와 약속했어요 🤙🏻&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  const allowAlarm = () =&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    const firebaseApp = initializeApp(&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      apiKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AIzaSyAsST86aqVITDUXVuYFi4J4wMir_IYEmTE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      authDomain&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;web-push-cf450.firebaseapp.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      projectId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;web-push-cf450&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      storageBucket&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;web-push-cf450.appspot.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      messagingSenderId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;735744104710&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      appId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1:735744104710:web:d8454962b445db084ce687&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;);

    const messaging = getMessaging(firebaseApp);

    getToken(messaging&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      vapidKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;BMx4Oq3RdTOvyqpRuL7kwdi3m9-EWXwQumnkjm-mrXWfGNeSHcLQrlLr4LA6d4o07M-H8xtNTeV4biV138boEjA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;)
      .then(currentToken =&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        if (currentToken) &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token comment&quot;&gt;//해당 클라이언트의 디바이스에 대한 토큰을 전달 받은 경우의 처리&lt;/span&gt;
				 &lt;span class=&quot;token comment&quot;&gt;//저희 서비스에서는 해당 단계에서 서버로 토큰을 전송하는 POST 요청을 발생시켰어요&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;)
      .catch(err =&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token comment&quot;&gt;//토큰 발급 과정에서 에러가 발생하는 경우&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;);
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h2&gt;[삽질하기] IOS 에서는 안돼 ~&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;모각GO는 서비스 특성 상, 모바일로 사용할 가능성이 높기때문에 PWA로 구현을 계획했어요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;push알람을 받기 위해서 PWA를 적용 시키고 FCM과의 연동을 진행했음 !&lt;/li&gt;
&lt;li&gt;PWA로 모바일에서 사용하기 위해서는&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Safari에서 웹 사이트에 접속&lt;/li&gt;
&lt;li&gt;가운데에 있는 공유 버튼 클릭&lt;/li&gt;
&lt;li&gt;홈 화면에 추가하기&lt;/li&gt;
&lt;li&gt;추가한 아이콘을 클릭해서 앱에 접속한 이후, 푸시 허용을 해야지만 알림이 전송 됨&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/81d5d14a-b46f-4d1c-b0fc-55f605d67ce0&quot; alt=&quot;잘 도착하쟈나 ~~~~~&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🫠 BUT IOS에서는 알림이 가지 않는 이슈 존재 &lt;br/&gt;
→ 아무런 반응도 하지 않아, 4번 절차를 진행할 수 없었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;데스크탑에서는 정상적으로 도착하기 때문에, FCM의 연결이 잘못된 것이라고는 볼 수 없었고 IOS의 연결에 문제가 있는지 구글링을 반복할 수 밖에 없었는데&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;FCM은 https에서만 실행 가능하며 사파리는 FCM이 지원을 하지 않아 아이폰에는 알람이 가지 않았는데, &lt;a href=&quot;&quot;&gt;WWDC 2022에서 Safari 16부터 웹 푸시 알람을 지원&lt;/a&gt;한다고 발표했으므로 별도 문제 없음.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;명확한 이유를 찾고 싶어서 기본적으로 모바일 기기에서는 safari에 대한 기본 notification 설정이 false로 되어져 있는데( 이 경우 aleart가 작동하지 않는다 ! ),&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;디바이스 설정을 true로 변경하고 aleart 알람창을 통해 &lt;code class=&quot;language-text&quot;&gt;Notification.permission&lt;/code&gt;권한을 확인해보니 &lt;code class=&quot;language-text&quot;&gt;Notification.permission&lt;/code&gt; 이 &lt;code class=&quot;language-text&quot;&gt;dennied&lt;/code&gt; 상태로 존재하기때문에 알람 허용 요청조차 가지 않고 있는 것이라는 것을 확인했음 - 한 번 이상 거절하면, &lt;code class=&quot;language-text&quot;&gt;Notification.permission&lt;/code&gt; 가 dennied로 설정 되고 알람 허용 요청 조차 가지 않음 ! 변경을 위해서는 직접 앱 설정으로 이동해 변경해줘야한다 !&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;iOS에서는 웹 앱이 홈 화면에 설치되지 않은 경우 항상 &lt;code class=&quot;language-text&quot;&gt;denied&lt;/code&gt;를 반환하는데, 여러번의 배포 과정을 통해 &lt;strong&gt;혹시 내가 PWA가 아닌가..?&lt;/strong&gt; 라는 질문을 하게 되었고 검증을 위해 LightHouse의 progresive web app을 통해 검사를 진행했다. → 만족하지 않은 조건이 있길래 만족시킨 후, 다시 테스트를 진행했다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ㅋ.ㅋ pwa가 아니었던.. 머슥.. 모바일에서 정상적으로 오는 것도 확인했움 !&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/1dca3c8d-ee95-4d7c-9ecf-336562716b99&quot; alt=&quot;스크린샷 2024-02-23 오전 11.55.18.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;h3&gt;고민) 권한허용을 어느 시점에 받을까&lt;/h3&gt;
&lt;p&gt;기존에는 서비스에 접근하자마자 요청을 보내는 방식이었는데, 우리 서비스의 성격상 &lt;strong&gt;서비스에 진입하자마자 위치정보의 동의&lt;/strong&gt;를 받아야한다. 알람 요청까지 서비스 진입 시에 받는다면,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;반복된 권한 요청이 사용자로 하여금 개인정보의 부담을 느끼게 할 수 있다&lt;/li&gt;
&lt;li&gt;이벤트 없이 메소드를 호출할 경우 브라우저마다 작동하지 않는 이슈 가능성이 존재하므로 &lt;code class=&quot;language-text&quot;&gt;Notification.requestPermission()&lt;/code&gt; 을 통한 권한 요청은 사용자의 클릭을 통해서 호출되는 방식을 권장한다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 두가지의 이유로 알람페이지의 화면에서 알림 켜기 버튼을 구현했다.&lt;/p&gt;
&lt;img width=&quot;50%&quot; alt=&quot;스크린샷 2024-07-25 오후 3 18 24&quot; src=&quot;https://github.com/user-attachments/assets/fb7d0e46-5b42-4011-8c83-55cb87c94914&quot;&gt;</content:encoded></item></channel></rss>